#端口配置
server:
  port: 8080

spring:
  #配置数据源
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/springboot-quartz?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
    username: root
    password: 123456

  #Quartz配置
  quartz:
    #相关属性配置
    properties:
      org:
        quartz:
          #scheduler相关
          scheduler:
            #scheduler的实例名
            instanceName: clusteredScheduler
            #默认主机名和时间戳生成实例ID,可以是任何字符串，但对于所有调度程序来说，必须是唯一的 对应qrtz_scheduler_state INSTANCE_NAME字段
            instanceId: AUTO
          #持久化相关
          jobStore:
            #持久化配置
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            #我们仅为数据库制作了特定于数据库的代理
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            #表示数据库中相关表是QRTZ_开头的
            tablePrefix: QRTZ_
            #打开群集功能
            isClustered: true
            #设置此实例“检入”*与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。
            clusterCheckinInterval: 10000
            #以指示JDBCJobStore将JobDataMaps中的所有值都作为字符串，因此可以作为名称 - 值对存储而不是在BLOB列中以其序列化形式存储更多复杂的对象。从长远来看，这是更安全的，因为您避免了将非String类序列化为BLOB的类版本问题。
            useProperties: false
          #线程池相关
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            #线程数
            threadCount: 10
            #线程优先级
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true
    #任务持久化到数据库方式
    job-store-type: jdbc
    #初始化表结构.初次使用的时候会在库中生成表格,后期注释掉即可.或者初始使用值为always,然后将值改为never
    jdbc:
      initialize-schema: always

#日志级别
logging:
  level:
    com.thinkingcao.quartz: debug